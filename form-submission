import React, { useState } from 'react';
import { Button, TextField, TextareaAutosize, Dialog, DialogActions, DialogContent, DialogTitle, FormControl, InputLabel, Select, MenuItem } from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import DeleteIcon from '@mui/icons-material/Delete';

const FormComponent = () => {
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    server: '',
    duration: '',
    query: '',
    desc: '',
    type: ''  // Add a new field for type selection
  });

  const handleClickOpen = () => {
    setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
    setFormData({
      name: '',
      server: '',
      duration: '',
      query: '',
      desc: '',
      type: ''
    });
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch('https://example.com/api/endpoint', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      // Optionally handle success here (e.g., show a success message)

      handleClose();

    } catch (error) {
      console.error('Error submitting the form:', error);
      // Optionally handle error state here (e.g., show an error message)
    }
  };

  const handleDelete = () => {
    // Implement delete logic here
    // For example, show a confirmation dialog before deleting
    console.log('Delete button clicked');
  };

  return (
    <div>
      <Button
        variant="contained"
        color="primary"
        startIcon={<AddIcon />}
        onClick={handleClickOpen}
      >
        Add Form
      </Button>

      <Dialog open={open} onClose={handleClose}>
        <DialogTitle>Add Form</DialogTitle>
        <DialogContent>
          <form onSubmit={handleSubmit}>
            <TextField
              autoFocus
              margin="dense"
              id="name"
              name="name"
              label="Name"
              type="text"
              fullWidth
              value={formData.name}
              onChange={handleChange}
              required
            />
            <TextField
              margin="dense"
              id="server"
              name="server"
              label="Server"
              type="text"
              fullWidth
              value={formData.server}
              onChange={handleChange}
              required
            />
            <TextField
              margin="dense"
              id="duration"
              name="duration"
              label="Duration"
              type="text"
              fullWidth
              value={formData.duration}
              onChange={handleChange}
              required
            />
            <TextareaAutosize
              id="query"
              name="query"
              aria-label="Query"
              placeholder="Query"
              value={formData.query}
              onChange={handleChange}
              rowsMin={3}
              required
              style={{ width: '100%', marginTop: 10 }}
            />
            <TextareaAutosize
              id="desc"
              name="desc"
              aria-label="Description"
              placeholder="Description"
              value={formData.desc}
              onChange={handleChange}
              rowsMin={3}
              required
              style={{ width: '100%', marginTop: 10 }}
            />
            <FormControl fullWidth style={{ marginTop: 10 }}>
              <InputLabel id="type-label">Type</InputLabel>
              <Select
                labelId="type-label"
                id="type"
                name="type"
                value={formData.type}
                onChange={handleChange}
                required
              >
                <MenuItem value="splunk">Splunk</MenuItem>
                <MenuItem value="api">API</MenuItem>
              </Select>
            </FormControl>
            <DialogActions>
              <Button onClick={handleClose} color="secondary">
                Cancel
              </Button>
              <Button onClick={handleDelete} startIcon={<DeleteIcon />} color="error">
                Delete
              </Button>
              <Button type="submit" variant="contained" color="primary">
                Submit
              </Button>
            </DialogActions>
          </form>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default FormComponent;
